section 1 : setup 

use puppeteer automation library 
mocha is test runner
chai is essential library


config prettier

----------------------------------------

section 2 

launch and close 
make test folder
test file
consume puppeteer
describe


puppeteer use async functions

const browser = await puppeteer.launch({ headless: false});

when we await if condition true test continue otherwise
it through error and test crash

check code for exec

--

launch options 
headless,
slowMo,
devtools,

also check type file


Pausing the test
await page.waitForTimeout(10000);

reload 
await page.reload();


goBack() and goForward()


--

interaction with inputs : typing

await page.type(selector, value, {delay: 200})
await page.type('#developer-name', 'mkz', { delay: 200 });


interaction with buttons and checkbox :
await page.click('#tried-test-cafe', { clickCount: 1 });


handle dropdown select box :
	await page.select('#preferred-interface', 'option info');

get page url and title :
const title = await page.title();
const url = await page.url();

get text from element :
there is not specific method for this 
we use evaluate functions
const text = await page.$eval('h1', el => el.textContent);


hint : eval with $ return single element  but with $$ return multi

get element count :
const countEl = await page.$$eval('p', el => el.length);


assertion :
first pull out expect from chai.expect
expect(title).to.be.a('string', 'Example Domain');
expect(url).to.include('example.com');
expect(text).to.be.a('string', 'Example Domain');
expect(countEl).to.equal(2);

set default timeout :
await page.setDefaultTimeout(10000);
await page.setDefaultNavigationTimeout(20000);

simulate keyboard press :
await page.keyboard.press('Enter', { delay: 10 });


wait for Xpath :
await page.waitForXPath('//h1');


element not exists :
in 2 way 
await page.waitForFunction(
  () => !document.querySelector('#signin_button')
);

it wait selector become hidden in website
await page.waitForSelector('#signin_button', { 
  hidden: true, timeout: 3000 
});

----------------------------------------------

section 3 : advanced puppeteer;

test hooks :

in mocha 
before one after one beforeEach , after each

run once before all each it to start
before(async () => {});

before vs beforeEach
run once , run before each it()


Device Emulation :

await page.setViewPort({ width: 1650, height: 1050 });
or 
const tablet = puppeteer.devices['iPad landscape'];
await page.emulate(tablet);


Use Cognito browser :
const context = await browser.createIncognitoBrowserContext();
page = await context.newPage();


extend puppeteer with custom command :
create lib folder
helpers.js

--

e2e test :
testing an application's workflow from beginning to end
check code 


------------------------------------------------

section 4 : Visual Regression Testing + Percy;

jest-image-snaphshots

install dependecies
create script in package.json
create jest.config.js
bail 0 say dont terminate test after one failed test 

create Visual test file
use toMatchImageSnapshot from jest- ...

then 
expect.extend({ toMatchImageSnapshot });
means our image snaphshot lib is ready

full page snaphshot 

single element snaphshot

responsive snaphshot 

for dynamic content 
we hide elements with puppeteer
await page.evaluate(() =>
  (document.querySelectorAll('h1') || []).forEach((el) => el.remove())
);

percy visual-regression tool
get token for percy project 
npm i @percy/puppeteer
create percy.test.js
create script
write file


-------------------------------------------


Section 5 : jest-puppeteer

add jest jest-puppeteer puppeteer

run this in terminal
./node_modules/.bin/jest --init

in jeset.config.js
disable testEnvironment node
preset: "jest-puppeteer",

make babel.config.js
do stuff

make jest-puppeteer.config.js
do default
with this you dont need to launch browser or create instance of page
set jest.setTimeout(larger number) becaue it normally designed for unit testing.


this is framework